<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0" xml:id="transclusion">
  <info>
    <title>DocBook Transclusion</title>
    <authorgroup>
    <author>
      <personname><firstname>Jirka</firstname>
        <surname>Kosek</surname></personname>
      <email>jirka@kosek.cz</email>
    </author>
    <author>
      <personname><firstname>Norman</firstname>
        <surname>Walsh</surname></personname>
      <email>ndw@nwalsh.com</email>
    </author>
    </authorgroup>
    <pubdate>2021-05-12</pubdate>
<!--
    <pubdate>2015-01-08</pubdate>
    <pubdate>2011-04-20</pubdate>
    <pubdate>2010-12-09</pubdate>
-->
  </info>

<!-- TODO:

Add xml:id where possible

-->

<section xml:id="intro">
<title>Introduction</title>

<para>This document describes the syntax, semantics, and processing model
for the DocBook transclusion mechanism. Please be aware that this is a
working draft – everything described below might change or disappear
completely. This proposal addresses the issues described in <citetitle
xlink:href="https://docbook.org/docs/transclusion-requirements/">Requirements
for transclusion in DocBook</citetitle>.  The DocBook TC welcomes
feedback on this draft, especially from users and developers of
DocBook authoring and processing tools. Please direct your comments to
the DocBook mailing list by sending email to
<email>docbook@lists.oasis-open.org</email>.</para>

<note>
<para>Previous version of this draft proposed the new elements
<tag>ref</tag> and <tag>def</tag> for implementing
transclusions. Meanwhile DocBook TC decided that transclusions should
rely as much as possible on standard technologies. XInclude 1.1 added
new features that allow to implement transclusion features on
top of the XInclude. As a result transclusions were completely
redesigned to be layered on top of XInclude 1.1.</para>
<para>This resulted in a loss of some features. For example, it's no longer
possible to locally redefine text replacement (see this <link
xlink:href="https://docbook.org/docs/transclusion/2011-04-20/transclusion.html#d6e65">example</link> from the April 20, 2014 draft of this document).</para>
</note>

<para>The following namespace bindings are used as prefixes in this document:</para>

<variablelist>
<varlistentry>
<term><tag class="prefix">trans</tag></term>
<listitem><para>DocBook transclusion namespace
(<uri>http://docbook.org/ns/transclusion</uri>)</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag class="prefix">db</tag></term>
<listitem><para>DocBook namespace
(<uri>http://docbook.org/ns/docbook</uri>)</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag class="prefix">xi</tag></term>
<listitem><para>XInclude namespace
(<uri>http://www.w3.org/2001/XInclude</uri>)</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag class="prefix">local</tag></term>
<listitem><para>XInclude namespace for copying attributes without a namespace
(<uri>http://www.w3.org/2001/XInclude/local-attributes</uri>)</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="processing">
<title>Transclusion processing</title>

<para>The processing model for transclusion is simple and cosists of the following steps:</para>
<orderedlist>
  <listitem><para>Normal XInclude 1.1 processing on the input document.</para></listitem>
  <listitem><para>DocBook transclusion processing on the result to fix problems such as
  duplicate IDs and broken cross-references.</para></listitem>
  <listitem><para>Normal processing on the resulting document using the DocBook stylesheets or equivalent tools.</para></listitem>
</orderedlist>

<para>Transclusion processing is controlled by 
attributes from the <uri>http://docbook.org/ns/transclusion</uri>
namespace. These attributes are typically inserted into a
document by using the attribute copying feature of XInclude 1.1 <xref linkend="XI11"/>, which
is described in section <citetitle
xlink:href="https://www.w3.org/XML/2012/08/xinclude-11/Overview.html#attribute-copying">4.3
Attribute Copying when processing XML</citetitle> of the XInclude 1.1 specification.</para>

<para>The transclusion processor copies documents node by node. For most
nodes this is an identity transformation. The few exceptions are
controlled by transclusion properties. Transclusion properties
<property>suffix</property> and <property>linkscope</property> are
defined for each node in the document as follows:</para>

<variablelist>
<varlistentry xml:id="suffix">
<term>suffix</term>
<listitem>
  <itemizedlist spacing="compact">
    <listitem><para>Defines a value to be appended to all ID values on the element
    (elements and attributes whose values should be treated as IDs are listed in the <property>ID-list</property> property)</para></listitem>
    <listitem><para>Default is an empty string</para></listitem>
    <listitem><para>Inherited</para></listitem>
    <listitem><para>Can be changed by the
    <tag class="attribute">trans:idfixup</tag> and
    <tag class="attribute">trans:suffix</tag> attributes</para></listitem>
  </itemizedlist>
</listitem>
</varlistentry>

<varlistentry xml:id="linkscope">
<term>linkscope</term>
<listitem>
  <itemizedlist spacing="compact">
    <listitem><para>Defines how to correct
    ID references (elements and attributes whose values should be treated as ID references are
    listed in the <property>IDREF-list</property> property)</para></listitem>
    <listitem><para>Allowed values are <code>user</code>, <code>local</code>,
    <code>near</code>, and <code>global</code></para></listitem>
    <listitem><para>Default value is <code>near</code></para></listitem>
    <listitem><para>Inherited</para></listitem>
    <listitem><para>Can be changed by the
    <tag class="attribute">trans:linkscope</tag> attribute</para></listitem>
  </itemizedlist>
</listitem>
</varlistentry>
</variablelist>

<para>For each document type there are two properties,
<property>ID-list</property> and <property>IDREF-list</property>, which
control the transclusion process. The <property>ID-list</property>
property defines the attributes and elements whose values should be treated as IDs.
Similarly, the  <property>IDREF-list</property> property defines the attributes
and elements whose values should be treated as ID references.
These properties are defined for DocBook 5.0 in <xref linkend="docbook-lists-definition"/>.
Transclusion processors are free to support the <property>ID-list</property> and
<property>IDREF-list</property> properties with other document
types, for example DocBook 4.x or TEI.</para>
<para>ID references identified in the <property>IDREF-list</property> are corrected as follows:</para>

<variablelist>
<varlistentry>
<term>When <code>linkscope=user</code></term>
<listitem><para>No adjustment is made.</para></listitem>
</varlistentry>
<varlistentry>
<term>When <code>linkscope=local</code></term>
<listitem><para>The value of the <property>suffix</property> property is added to every ID reference as a suffix.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>When <code>linkscope=near</code></term>
<listitem><para>Each ID reference is adjusted to point to
the closest element that has a <link linkend="matching-id">matching ID</link>.</para>
<para>To find the closest element, the parent element of the element that contains the ID reference is searched for a matching ID, followed by that element's descendants.
If no matching ID is found, that element's parent is inspected in the same way. This continues until a match is found or the
root element is reached.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>When <code>linkscope=global</code></term>
<listitem><para>Each ID reference is adjusted to point to
the first element in document order that has a <link
linkend="matching-id">matching ID</link>.</para>
</listitem>
</varlistentry>
</variablelist>

<para xml:id="matching-id">A <emphasis>matching ID</emphasis> does not mean exact string equality
between ID and IDREF values. A matching ID means that the values of an ID and IDREF match after removing any added suffixes.</para>

<para>Transclusion properties can be set on any element using the following attributes:</para>

<variablelist>
<varlistentry xml:id="idfixup-attribute">
<term><tag class="attribute">trans:idfixup</tag> attribute</term>
<listitem>
<variablelist>
<varlistentry>
<term>value <tag class="attvalue">none</tag></term>
<listitem><para>The <property>suffix</property> property is set to an empty string.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>value <tag class="attvalue">suffix</tag></term>
<listitem><para>The <property>suffix</property> property is set to the concatenation
of the inherited suffix value and the value specified in the <tag
class="attribute">trans:suffix</tag> attribute.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>value <tag class="attvalue">auto</tag></term>
<listitem><para>The <property>suffix</property> property is set to a unique value
for each element.<footnote><para>For example, XSLT-based
implementations can use the <function>generate-id()</function> function to
generate a unique suffix.</para></footnote></para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>

<varlistentry xml:id="suffix-attribute">
<term><tag class="attribute">trans:suffix</tag> attribute</term>
<listitem>
<para>This attribute defines the value of the <property>suffix</property> property used when <code>trans:idfixup="suffix"</code>.</para>
<para>It's an error to use this attribute when the attribute/value pair <code>trans:idfixup="suffix"</code> is not also on the element.</para>
</listitem>
</varlistentry>

<varlistentry xml:id="linkscope-attribute">
<term><tag class="attribute">trans:linkscope</tag> attribute</term>
<listitem>
  <para>Sets the value of the <property>linkscope</property> property.
  Permitted values are: <code>user</code>, <code>local</code>, <code>near</code>, and <code>global</code>.</para>
</listitem>
</varlistentry>

</variablelist>

<para>During the transclusion process all attributes from the transclusion
namespace are removed from the resulting document.</para>

<variablelist xml:id="docbook-lists-definition">
<title>Definition of ID-list and IDREF-list properties for DocBook 5.0</title>
<para>In DocBook 5.0, the <property>ID-list</property> and <property>IDREF-list</property> properties contain the attributes shown here:</para>
<varlistentry>
<term><property>ID-list</property></term>
<listitem><para><tag class="attribute">xml:id</tag></para></listitem>
</varlistentry>
<varlistentry>
<term><property>IDREF-list</property></term>
<listitem><para>
<tag class="attribute">linkend</tag>,
<tag class="attribute">linkends</tag>,
<tag class="attribute">otherterm</tag>,
<tag class="attribute">zone</tag>,
<tag class="attribute">startref</tag>,
<tag class="attribute">arearefs</tag>,
<tag class="attribute">targetptr</tag>, and
<tag class="attribute">endterm</tag>.</para>
<para>The <tag class="attribute">href</tag> attribute in the XLink
namespace is considered a member of <property>IDREF-list</property> when its value begins with <code>#</code>.</para>
</listitem>
</varlistentry>
</variablelist>

</section>

<appendix xml:id="using-xinclude">
<title>Using XInclude 1.1 features for your content</title>

<para>The most common transclusion scenario is reuse of shared strings
(see <link
xlink:href="https://docbook.org/docs/transclusion-requirements/transclusion-requirements.html#uc-1"/>). With
XInclude 1.0 this could only be done using XPointer schemes that
were not very interoperable. With XInclude 1.1, doing this is much easier.</para>

<para>Let's assume we have defined a set of shared strings in separate document (see <xref linkend="ex.1"/>).</para>

<example xml:id="ex.1">
<title>Definitions stored in a separate document (<filename>definitions.001.xml</filename>)</title>
<programlisting><textobject>
<textdata fileref='examples/definitions.001.xml'/>
</textobject></programlisting>
</example>

<para>If you transclude parts of this document as shown in <xref linkend="ex.2"/>, you will end up with duplicate IDs.
In this example, the same definition is included twice. Because the ID attributes are passed through unchanged, the ID value <quote>product-name</quote> occurs twice in the resulting document.</para>

<example xml:id="ex.2">
<title>Transclusion with duplicate IDs</title>
<programlisting><textobject>
<textdata fileref='examples/shared-texts.003.xml'/>
</textobject></programlisting>
<para>Result of transclusion:</para>
<programlisting><textobject>
<textdata fileref='examples/shared-texts.003.xml.out'/>
</textobject></programlisting>
</example>

<para>XInclude 1.1 has an attribute, <tag class="attribute">set-xml-id</tag>,
which can be used to change or remove the  <tag class="attribute">xml:id</tag>
attribute on included content. <xref linkend="ex.3"/> uses this attribute to avoid duplicate IDs.</para>

<example xml:id="ex.3">
<title>Using <tag class="attribute">set-xml-id</tag> to remove the top-level ID during transclusion</title>
<programlisting><textobject>
<textdata fileref='examples/shared-texts.010.xml'/>
</textobject></programlisting>
<para>Result of transclusion:</para>
<programlisting><textobject>
<textdata fileref='examples/shared-texts.010.xml.out'/>
</textobject></programlisting>
</example>

<para>Another new XInclude 1.1 feature lets you override
attributes on included content. <xref linkend="ex.4"/> shows how to use this feature to
override effectivity attributes. This feature works by placing attributes from a specially
defined namespace (<uri>http://www.w3.org/2001/XInclude/local-attributes</uri>) on
the <tag>xi:include</tag> element. These attributes define the values that should be
used to replace attributes of the same name, but no namespace, in the transcluded content.</para>
<example xml:id="ex.4">
<title>Overriding DocBook attributes on inclusion</title>
<para>Consider section (<filename>section.001.xml</filename>), which is
labeled for the Linux operating system (<code>os="linux"</code>).</para>
<programlisting><textobject>
<textdata fileref='examples/section.001.xml'/>
</textobject></programlisting>
<para>Now we want to include this section in another document and pretend that
it's actually targeted at a BSD system.</para>
<programlisting><textobject>
<textdata fileref='examples/article.002.xml'/>
</textobject></programlisting>
<para>The value of the <code>local:os</code> attribute replaces the value of the
<code>os</code> attribute during the XInclude process.</para>
<programlisting><textobject>
<textdata fileref='examples/article.002.xml.out'/>
</textobject></programlisting>
</example>

</appendix>

<appendix xml:id="tutorial">
<title>Special ID/IDREF processing</title>

<para>Transcluded content can contain <tag
class="attribute">xml:id</tag> attributes. If one fragment is
transcluded more than once, then the resulting document after transclusion will
contain duplicate IDs. The same problem can occur if the same ID is used in two different
transcluded modules. To overcome this problem, IDs and ID references
can be adjusted during the transclusion process.</para>

<para>The <tag class="attribute">trans:idfixup</tag> attribute on
the <tag>xi:include</tag> element determines how IDs are adjusted during transclusion.</para>

<para>Of course, if IDs are adjusted then all corresponding ID references also have
to be adjusted.</para>

<para>These adjustments are controlled by the <tag
class="attribute">trans:idfixup</tag> and <tag
class="attribute">trans:linkscope</tag> attributes.
The following examples show the effect of using those two
attributes. Each example transcludes the procedure shown in <xref linkend="ex.5"/>, which
contains one internal link and one external link.</para>

<example xml:id="ex.5">
<title>Module with sample procedure</title>
<programlisting><textobject>
<textdata fileref='examples/procedure.001.xml'/>
</textobject></programlisting>
</example>

<para><xref linkend="ex.6"/> transcludes this module twice to
show how we can deal with the duplicate ID problem.</para>

<example xml:id="ex.6">
<title>Automatic ID/IDREF adjustment</title>
<programlisting><textobject>
<textdata fileref='examples/book.002.xml'/>
</textobject></programlisting>
<para>Result of transclusion:</para>
<programlisting><textobject>
<textdata fileref='examples/book.002.xml.out'/>
</textobject></programlisting>
</example>
<para>Specifying <tag class="attribute">db:idfixup</tag> triggers
the automatic ID/IDREF fixup. All IDs in the transcluded
modules are automatically suffixed to prevent ID collisions. Then,
IDREFs are fixed so that links point to the nearest possible
target. In <xref linkend="ex.6"/>, the link from step 2 to step 1 in the procedure always
points to the same instance of the procedure. However, the <quote>buy</quote>
link correctly points to the target in the main document.</para>
<para><xref linkend="ex.7"/> uses <literal>trans:linkscope="global"</literal>
for the second transclusion. The result is that the link from step 2 in the second
procedure links to step 1 in the first procedure.</para>
<example xml:id="ex.7">
<title>Global linkscope</title>
<programlisting><textobject>
<textdata fileref='examples/book.003.xml'/>
</textobject></programlisting>
<para>Result of transclusion:</para>
<programlisting><textobject>
<textdata fileref='examples/book.003.xml.out'/>
</textobject></programlisting>
</example>
<para><xref linkend="ex.8"/> uses <literal>db:linkscope="local"</literal> on
the first transclusion. This means that every link from this transclusion must
point to an ID inside the transcluded content; no external links are allowed.
Because the transcluded content does contain a link to an external ID (<quote>buy</quote>),
this example is broken, since the transclusion process rewrites <quote>buy</quote>
to be <quote>buy---d1e23</quote>, for which there is no corresponding target.</para>
<para>This method of transclusion can be useful if you are
transcluding foreign content and want to isolate its links from the rest of your document.</para>
<example xml:id="ex.8">
<title>Local linkscope</title>
<programlisting><textobject>
<textdata fileref='examples/book.004.xml'/>
</textobject></programlisting>
<para>Result of transclusion:</para>
<programlisting><textobject>
<textdata fileref='examples/book.004.xml.out'/>
</textobject></programlisting>
</example>

<para>You can manually assign the value of the suffix used in transcluded content.
<xref linkend="ex.9"/> shows how to do this.</para>
<remark>Although suffixes seem to be a better approach for automatically
generated IDs, prefixes may be a better approach for manually specified IDs
(for example when HTML filenames are generated based on the xml:id
value). Should we put the prefix option back in the
specification?</remark>
<example xml:id="ex.9">
<title>Manually assigned suffix</title>
<programlisting><textobject>
<textdata fileref='examples/book.005.xml'/>
</textobject></programlisting>
<para>Result of transclusion:</para>
<programlisting><textobject>
<textdata fileref='examples/book.005.xml.out'/>
</textobject></programlisting>
</example>

<para>By default, XInclude does not do any postprocessing.
Thus, the resulting document in <xref linkend="ex.10"/> contains duplicate IDs and is not valid.</para>
<example xml:id="ex.10">
<title>Disabling ID fixup</title>
<programlisting><textobject>
<textdata fileref='examples/book.006.xml'/>
</textobject></programlisting>
<para>Result of transclusion:</para>
<programlisting><textobject>
<textdata fileref='examples/book.006.xml.out'/>
</textobject></programlisting>
</example>

<example xml:id="ex.11">
<title>Chaining suffixes</title>
<para>Suppose we have note in a separate file
(<filename>note.001.xml</filename>):</para>
<programlisting><textobject>
<textdata fileref='examples/note.001.xml'/>
</textobject></programlisting>
<para>We transclude it into another file
(<filename>procedure.002.xml</filename>) assigning a suffix manually:</para>
<programlisting><textobject>
<textdata fileref='examples/procedure.002.xml'/>
</textobject></programlisting>
<para>Then we transclude this procedure into a master document,
again with a manually specified suffix:</para>
<programlisting><textobject>
<textdata fileref='examples/book.012.xml'/>
</textobject></programlisting>
<para>The result is that the ID in the transcluded note contains a chained
suffix <quote>note_procedure002_note001</quote>:</para>
<programlisting><textobject>
<textdata fileref='examples/book.012.xml.out'/>
</textobject></programlisting>
</example>

</appendix>

<appendix xml:id="schema">
<title>DocBook schema with support for transclusions</title>

<para>The following customization layer allows transclusion attributes in
DocBook. No changes are required for XInclude which already allows arbitrary namespaced
attributes.</para>

<programlisting><![CDATA[namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace db = "http://docbook.org/ns/docbook"
namespace trans = "http://docbook.org/ns/transclusion"
default namespace = "http://docbook.org/ns/docbook"

include "docbookxi.rnc" {
  db.common.base.attributes |= (db.trans.idfixup? & db.trans.suffix? & db.trans.linkscope?)
}

db.trans.idfixup = attribute trans:idfixup { "none" | "suffix" | "auto" }
db.trans.suffix = attribute trans:suffix { text }
db.trans.linkscope = attribute trans:linkscope { "user" | "local" | "near" | "global" }]]></programlisting>

</appendix>

<!--
<appendix xml:id="transclusion-processor">
<title>Sample transclusion processor written in XSLT 2.0</title>

<para>Please note that this sample transclusion processor is not yet
feature complete. It supports only a subset of the proposal.</para>

<programlisting><textobject>
<textdata fileref='examples/transclude.xsl'/>
</textobject></programlisting>

</appendix>
-->

<appendix>
<title>Change log</title>

<revhistory>
<revision>
<date>2021-05-12</date>
<authorinitials>ndw</authorinitials>
<revdescription>
<itemizedlist>
<listitem>
<para>Removed the “sample transclusion processor” appendix as it was incomplete
and buggy.</para>
</listitem>
<listitem>
<para>Added the sample schema in <xref linkend="schema"/>.</para>
</listitem>
</itemizedlist>
</revdescription>
</revision>
</revhistory>
</appendix>

<bibliography xml:id="bibliography">
<bibliomixed xml:id="XI11">
  <title>XML Inclusions (XInclude) Version 1.1</title>.
  W3C Working Group Note.
  <pubdate>21 July 2016.</pubdate>
  <bibliosource>Available at
  <link xlink:href="https://www.w3.org/TR/xinclude-11/"/></bibliosource>.</bibliomixed>
</bibliography>

</article>
